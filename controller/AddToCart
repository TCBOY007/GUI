/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package servlets;

import domain.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.transaction.UserTransaction;

/**
 *
 * @author chenc
 */
@WebServlet(name = "AddToCart", urlPatterns = {"/AddToCart"})
public class AddToCart extends HttpServlet {

    @PersistenceContext
    EntityManager em;
    @Resource
    UserTransaction utx;

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {

            //get the cartID
            //get the quantity
            //calcualte the subtotal     
            //get the product price
            //get customer ID
            Customer customer = getCurrentLoginCustomer();

            // get the product id from the request parameter
            String prodId = request.getParameter("productid");

            // retrieve the Product object from database based on prodId
            ProductService ps = new ProductService(em);
            Product product = ps.findProductById(prodId);

            // get the price from the product
            double prodPrice = product.getPrice();
            
            
            // create a new OrderCart object for the product
            OrderCart cart = new OrderCart();
            cart.setProductid(product);

            String temProductId = createCartID();
            cart.setCartid(temProductId);
            cart.setQuantity(1);
            cart.setPrice(prodPrice);
            cart.setCustomerid(customer);

            // get the cart list from the session
            HttpSession session = request.getSession();

            // add the new cart to the cart list and save to session
            // save the cart list to the database using JPA
            OrderCartService service = new OrderCartService(em);
            try {
                utx.begin();
                service.saveOrderCartList(cart);
                utx.commit();
            } catch (Exception ex) {

            }
            try {
                Thread.sleep(1000); // wait for 1 seconds
            } catch (InterruptedException ex) {
                Logger.getLogger(AddToCart.class.getName()).log(Level.SEVERE, null, ex);
            }
            response.sendRedirect("product.jsp");

        }
    }

    public Customer getCurrentLoginCustomer() {

        return new Customer("C001");

    }

    private String createCartID() {

        List<OrderCart> tempOrderCartList = em.createNamedQuery("OrderCart.findAll").getResultList();
        //if the list is not empty then can create cart id 
        if (!tempOrderCartList.isEmpty()) {

            char firstIndex = tempOrderCartList.get(tempOrderCartList.size() - 1).getCartid().charAt(2);
            char secondIndex = tempOrderCartList.get(tempOrderCartList.size() - 1).getCartid().charAt(3);
            char thirdIndex = tempOrderCartList.get(tempOrderCartList.size() - 1).getCartid().charAt(4);

            String tempCartID = String.valueOf(firstIndex) + String.valueOf(secondIndex) + String.valueOf(thirdIndex);
            int nextCartID = Integer.parseInt(tempCartID) + 1;
            return "Ca" + String.format("%03d", nextCartID);
        } else {
            return "Ca" + String.format("%03d", 1);
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
